{"version":3,"file":"useDrag.js","sourceRoot":"","sources":["../../src/hooks/useDrag.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAOhD,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAA;AAC9D,OAAO,EAAE,yBAAyB,EAAE,MAAM,sCAAsC,CAAA;AAChF,OAAO,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAA;AAEtE;;;GAGG;AACH,MAAM,UAAU,OAAO,CAKtB,IAAgE;IAEhE,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA;IAC5B,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;IAEtB,gDAAgD;IAChD,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,sBAAsB,CAAC,CAAA;IACpD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE,2BAA2B,CAAC,CAAA;IAE9D,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,oBAAoB,EAAE,CAAA;IACnD,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAA;IAE3C,MAAM,MAAM,GAAmB,gBAAgB,CAC9C,OAAO,EACP,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAqB,CAAA,CAAC,EACzD,GAAG,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,CAC3B,CAAA;IAED,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;QACrE,SAAS;KACT,CAAC,CAAA;IACF,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE;QACvE,SAAS;KACT,CAAC,CAAA;IACF,yBAAyB,CAAC,GAAG,EAAE;QAC9B,SAAS,CAAC,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAA;QAC7D,SAAS,CAAC,SAAS,EAAE,CAAA;IACtB,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;IACf,yBAAyB,CAAC,GAAG,EAAE;QAC9B,SAAS,CAAC,kBAAkB,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,IAAI,IAAI,CAAA;QACrE,SAAS,CAAC,SAAS,EAAE,CAAA;IACtB,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAA;IACf,OAAO,CAAC,MAAM,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,CAAA;AACvD,CAAC","sourcesContent":["import { useRef, useMemo } from 'react'\nimport { invariant } from '@react-dnd/invariant'\nimport {\n\tDragSourceHookSpec,\n\tDragObjectWithType,\n\tConnectDragSource,\n\tConnectDragPreview,\n} from '../interfaces'\nimport { useMonitorOutput } from './internal/useMonitorOutput'\nimport { useIsomorphicLayoutEffect } from './internal/useIsomorphicLayoutEffect'\nimport { useDragSourceMonitor, useDragHandler } from './internal/drag'\n\n/**\n * useDragSource hook\n * @param sourceSpec The drag source specification *\n */\nexport function useDrag<\n\tDragObject extends DragObjectWithType,\n\tDropResult,\n\tCollectedProps\n>(\n\tspec: DragSourceHookSpec<DragObject, DropResult, CollectedProps>,\n): [CollectedProps, ConnectDragSource, ConnectDragPreview] {\n\tconst specRef = useRef(spec)\n\tspecRef.current = spec\n\n\t// TODO: wire options into createSourceConnector\n\tinvariant(spec.item != null, 'item must be defined')\n\tinvariant(spec.item.type != null, 'item type must be defined')\n\n\tconst [monitor, connector] = useDragSourceMonitor()\n\tuseDragHandler(specRef, monitor, connector)\n\n\tconst result: CollectedProps = useMonitorOutput(\n\t\tmonitor,\n\t\tspecRef.current.collect || (() => ({} as CollectedProps)),\n\t\t() => connector.reconnect(),\n\t)\n\n\tconst connectDragSource = useMemo(() => connector.hooks.dragSource(), [\n\t\tconnector,\n\t])\n\tconst connectDragPreview = useMemo(() => connector.hooks.dragPreview(), [\n\t\tconnector,\n\t])\n\tuseIsomorphicLayoutEffect(() => {\n\t\tconnector.dragSourceOptions = specRef.current.options || null\n\t\tconnector.reconnect()\n\t}, [connector])\n\tuseIsomorphicLayoutEffect(() => {\n\t\tconnector.dragPreviewOptions = specRef.current.previewOptions || null\n\t\tconnector.reconnect()\n\t}, [connector])\n\treturn [result, connectDragSource, connectDragPreview]\n}\n"]}