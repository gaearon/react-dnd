{"version":3,"file":"DndProvider.js","sourceRoot":"","sources":["../../src/common/DndProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAM,SAAS,EAAE,IAAI,EAAE,MAAM,OAAO,CAAA;AAE3C,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAA;AAa3D,IAAI,QAAQ,GAAG,CAAC,CAAA;AAChB,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAA;AAEjE;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAmC,IAAI,CAC9D,SAAS,WAAW,CAAC,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE;IAC1C,MAAM,CAAC,OAAO,EAAE,gBAAgB,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAA,CAAC,sBAAsB;IACpF;;;;OAIG;IACH,SAAS,CAAC,GAAG,EAAE;QACd,IAAI,gBAAgB,EAAE;YACrB,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAA;YAClC,EAAE,QAAQ,CAAA;YAEV,OAAO,GAAG,EAAE;gBACX,IAAI,EAAE,QAAQ,KAAK,CAAC,EAAE;oBACrB,OAAO,CAAC,YAAY,CAAC,GAAG,IAAI,CAAA;iBAC5B;YACF,CAAC,CAAA;SACD;IACF,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,OAAO,KAAC,UAAU,CAAC,QAAQ,kBAAC,KAAK,EAAE,OAAO,gBAAG,QAAQ,YAAuB,CAAA;AAC7E,CAAC,CACD,CAAA;AAED,SAAS,kBAAkB,CAAC,KAAiC;IAC5D,IAAI,SAAS,IAAI,KAAK,EAAE;QACvB,MAAM,OAAO,GAAG,EAAE,eAAe,EAAE,KAAK,CAAC,OAAO,EAAE,CAAA;QAClD,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;KACvB;IAED,MAAM,OAAO,GAAG,yBAAyB,CACxC,KAAK,CAAC,OAAO,EACb,KAAK,CAAC,OAAO,EACb,KAAK,CAAC,OAAO,EACb,KAAK,CAAC,SAAS,CACf,CAAA;IACD,MAAM,gBAAgB,GAAG,CAAC,KAAK,CAAC,OAAO,CAAA;IAEvC,OAAO,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAA;AACnC,CAAC;AAED,SAAS,yBAAyB,CACjC,OAAuB,EACvB,UAA0B,gBAAgB,EAAE,EAC5C,OAAuB,EACvB,SAAmB;IAEnB,MAAM,GAAG,GAAG,OAAc,CAAA;IAC1B,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QACvB,GAAG,CAAC,YAAY,CAAC,GAAG,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAA;KAC1E;IACD,OAAO,GAAG,CAAC,YAAY,CAAC,CAAA;AACzB,CAAC;AAGD,SAAS,gBAAgB;IACxB,OAAO,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAE,MAAc,CAAA;AAChE,CAAC","sourcesContent":["import { FC, useEffect, memo } from 'react'\nimport { BackendFactory, DragDropManager } from 'dnd-core'\nimport { DndContext, createDndContext } from './DndContext'\n\nexport type DndProviderProps<BackendContext, BackendOptions> =\n\t| {\n\t\t\tmanager: DragDropManager\n\t  }\n\t| {\n\t\t\tbackend: BackendFactory\n\t\t\tcontext?: BackendContext\n\t\t\toptions?: BackendOptions\n\t\t\tdebugMode?: boolean\n\t  }\n\nlet refCount = 0\nconst INSTANCE_SYM = Symbol.for('__REACT_DND_CONTEXT_INSTANCE__')\n\n/**\n * A React component that provides the React-DnD context\n */\nexport const DndProvider: FC<DndProviderProps<any, any>> = memo(\n\tfunction DndProvider({ children, ...props }) {\n\t\tconst [manager, isGlobalInstance] = getDndContextValue(props) // memoized from props\n\t\t/**\n\t\t * If the global context was used to store the DND context\n\t\t * then where theres no more references to it we should\n\t\t * clean it up to avoid memory leaks\n\t\t */\n\t\tuseEffect(() => {\n\t\t\tif (isGlobalInstance) {\n\t\t\t\tconst context = getGlobalContext()\n\t\t\t\t++refCount\n\n\t\t\t\treturn () => {\n\t\t\t\t\tif (--refCount === 0) {\n\t\t\t\t\t\tcontext[INSTANCE_SYM] = null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, [])\n\n\t\treturn <DndContext.Provider value={manager}>{children}</DndContext.Provider>\n\t},\n)\n\nfunction getDndContextValue(props: DndProviderProps<any, any>) {\n\tif ('manager' in props) {\n\t\tconst manager = { dragDropManager: props.manager }\n\t\treturn [manager, false]\n\t}\n\n\tconst manager = createSingletonDndContext(\n\t\tprops.backend,\n\t\tprops.context,\n\t\tprops.options,\n\t\tprops.debugMode,\n\t)\n\tconst isGlobalInstance = !props.context\n\n\treturn [manager, isGlobalInstance]\n}\n\nfunction createSingletonDndContext<BackendContext, BackendOptions>(\n\tbackend: BackendFactory,\n\tcontext: BackendContext = getGlobalContext(),\n\toptions: BackendOptions,\n\tdebugMode?: boolean,\n) {\n\tconst ctx = context as any\n\tif (!ctx[INSTANCE_SYM]) {\n\t\tctx[INSTANCE_SYM] = createDndContext(backend, context, options, debugMode)\n\t}\n\treturn ctx[INSTANCE_SYM]\n}\n\ndeclare const global: any\nfunction getGlobalContext() {\n\treturn typeof global !== 'undefined' ? global : (window as any)\n}\n"]}