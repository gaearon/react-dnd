{"version":3,"file":"useDrop.js","sourceRoot":"","sources":["../../src/hooks/useDrop.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAMhD,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAA;AAC9D,OAAO,EAAE,yBAAyB,EAAE,MAAM,sCAAsC,CAAA;AAChF,OAAO,EAAE,cAAc,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAA;AAEtE;;;GAGG;AACH,MAAM,UAAU,OAAO,CAKtB,IAAgE;IAEhE,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAA;IAC5B,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;IACtB,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE,wBAAwB,CAAC,CAAA;IAExD,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,oBAAoB,EAAE,CAAA;IACnD,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAA;IAE3C,MAAM,MAAM,GAAmB,gBAAgB,CAC9C,OAAO,EACP,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAqB,CAAA,CAAC,EACzD,GAAG,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,CAC3B,CAAA;IAED,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE;QACrE,SAAS;KACT,CAAC,CAAA;IAEF,yBAAyB,CAAC,GAAG,EAAE;QAC9B,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAA;QAClD,SAAS,CAAC,SAAS,EAAE,CAAA;IACtB,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;IAClB,OAAO,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAA;AACnC,CAAC","sourcesContent":["import { useRef, useMemo } from 'react'\nimport { invariant } from '@react-dnd/invariant'\nimport {\n\tDropTargetHookSpec,\n\tConnectDropTarget,\n\tDragObjectWithType,\n} from '../interfaces'\nimport { useMonitorOutput } from './internal/useMonitorOutput'\nimport { useIsomorphicLayoutEffect } from './internal/useIsomorphicLayoutEffect'\nimport { useDropHandler, useDropTargetMonitor } from './internal/drop'\n\n/**\n * useDropTarget Hook\n * @param spec The drop target specification\n */\nexport function useDrop<\n\tDragObject extends DragObjectWithType,\n\tDropResult,\n\tCollectedProps\n>(\n\tspec: DropTargetHookSpec<DragObject, DropResult, CollectedProps>,\n): [CollectedProps, ConnectDropTarget] {\n\tconst specRef = useRef(spec)\n\tspecRef.current = spec\n\tinvariant(spec.accept != null, 'accept must be defined')\n\n\tconst [monitor, connector] = useDropTargetMonitor()\n\tuseDropHandler(specRef, monitor, connector)\n\n\tconst result: CollectedProps = useMonitorOutput(\n\t\tmonitor,\n\t\tspecRef.current.collect || (() => ({} as CollectedProps)),\n\t\t() => connector.reconnect(),\n\t)\n\n\tconst connectDropTarget = useMemo(() => connector.hooks.dropTarget(), [\n\t\tconnector,\n\t])\n\n\tuseIsomorphicLayoutEffect(() => {\n\t\tconnector.dropTargetOptions = spec.options || null\n\t\tconnector.reconnect()\n\t}, [spec.options])\n\treturn [result, connectDropTarget]\n}\n"]}