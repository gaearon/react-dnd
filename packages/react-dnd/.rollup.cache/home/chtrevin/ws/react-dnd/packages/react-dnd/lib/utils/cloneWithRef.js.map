{"version":3,"file":"cloneWithRef.js","sourceRoot":"","sources":["../../src/utils/cloneWithRef.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,MAAM,OAAO,CAAA;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAEhD,SAAS,MAAM,CAAC,GAAQ,EAAE,IAAS;IAClC,IAAI,OAAO,GAAG,KAAK,UAAU,EAAE;QAC9B,GAAG,CAAC,IAAI,CAAC,CAAA;KACT;SAAM;QACN,GAAG,CAAC,OAAO,GAAG,IAAI,CAAA;KAClB;AACF,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,OAAY,EAAE,MAAW;IACrD,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAA;IAC/B,SAAS,CACR,OAAO,WAAW,KAAK,QAAQ,EAC/B,sEAAsE;QACrE,sFAAsF;QACtF,yEAAyE,CAC1E,CAAA;IAED,IAAI,CAAC,WAAW,EAAE;QACjB,gEAAgE;QAChE,OAAO,YAAY,CAAC,OAAO,EAAE;YAC5B,GAAG,EAAE,MAAM;SACX,CAAC,CAAA;KACF;SAAM;QACN,OAAO,YAAY,CAAC,OAAO,EAAE;YAC5B,GAAG,EAAE,CAAC,IAAS,EAAE,EAAE;gBAClB,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;gBACzB,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;YACrB,CAAC;SACD,CAAC,CAAA;KACF;AACF,CAAC","sourcesContent":["import { cloneElement, ReactElement } from 'react'\nimport { invariant } from '@react-dnd/invariant'\n\nfunction setRef(ref: any, node: any) {\n\tif (typeof ref === 'function') {\n\t\tref(node)\n\t} else {\n\t\tref.current = node\n\t}\n}\n\nexport function cloneWithRef(element: any, newRef: any): ReactElement<any> {\n\tconst previousRef = element.ref\n\tinvariant(\n\t\ttypeof previousRef !== 'string',\n\t\t'Cannot connect React DnD to an element with an existing string ref. ' +\n\t\t\t'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' +\n\t\t\t'Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs',\n\t)\n\n\tif (!previousRef) {\n\t\t// When there is no ref on the element, use the new ref directly\n\t\treturn cloneElement(element, {\n\t\t\tref: newRef,\n\t\t})\n\t} else {\n\t\treturn cloneElement(element, {\n\t\t\tref: (node: any) => {\n\t\t\t\tsetRef(previousRef, node)\n\t\t\t\tsetRef(newRef, node)\n\t\t\t},\n\t\t})\n\t}\n}\n"]}