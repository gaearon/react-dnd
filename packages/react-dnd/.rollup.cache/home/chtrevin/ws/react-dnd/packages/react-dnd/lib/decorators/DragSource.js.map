{"version":3,"file":"DragSource.js","sourceRoot":"","sources":["../../src/decorators/DragSource.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAGhD,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAA;AAMjD,OAAO,EAAE,uBAAuB,EAAE,MAAM,SAAS,CAAA;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAA;AACnD,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAA;AACvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,iCAAiC,CAAA;AACvE,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAA;AAC3D,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAA;AAClD,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAE3D;;;;;;;GAOG;AACH,MAAM,UAAU,UAAU,CAKzB,IAAyD,EACzD,IAA+C,EAC/C,OAA2D,EAC3D,UAAqC,EAAE;IAEvC,uBAAuB,CACtB,YAAY,EACZ,gCAAgC,EAChC,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,OAAO,CACP,CAAA;IACD,IAAI,OAAO,GAAyC,IAErC,CAAA;IACf,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;QAC/B,SAAS,CACR,WAAW,CAAC,IAAI,CAAC,EACjB,qEAAqE;YACpE,yEAAyE;YACzE,wBAAwB;YACxB,sEAAsE,EACvE,IAAI,CACJ,CAAA;QACD,OAAO,GAAG,GAAG,EAAE,CAAC,IAAI,CAAA;KACpB;IACD,SAAS,CACR,aAAa,CAAC,IAAI,CAAC,EACnB,sEAAsE;QACrE,wCAAwC;QACxC,sEAAsE,EACvE,IAAI,CACJ,CAAA;IACD,MAAM,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAA;IAC9C,SAAS,CACR,OAAO,OAAO,KAAK,UAAU,EAC7B,wEAAwE;QACvE,6DAA6D;QAC7D,wBAAwB;QACxB,sEAAsE,EACvE,OAAO,CACP,CAAA;IACD,SAAS,CACR,aAAa,CAAC,OAAO,CAAC,EACtB,yEAAyE;QACxE,iCAAiC;QACjC,wBAAwB;QACxB,sEAAsE,EACvE,OAAO,CACP,CAAA;IAED,OAAQ,SAAS,cAAc,CAE7B,kBAAiC;QAClC,OAAO,eAAe,CAA4C;YACjE,oBAAoB,EAAE,YAAY;YAClC,aAAa,EAAE,YAAmB;YAClC,eAAe,EAAE,cAAc;YAC/B,eAAe,EAAE,CAAC,OAAY,EAAE,EAAE,CAAC,IAAI,eAAe,CAAC,OAAO,CAAC;YAC/D,aAAa,EAAE,CAAC,OAAwB,EAAE,EAAE,CAC3C,IAAI,qBAAqB,CAAC,OAAO,CAAC;YACnC,kBAAkB;YAClB,OAAO;YACP,OAAO;YACP,OAAO;SACP,CAAC,CAAA;IACH,CAAiD,CAAA;AAClD,CAAC","sourcesContent":["import { ComponentType as RComponentType } from 'react'\nimport { invariant } from '@react-dnd/invariant'\nimport { SourceType, DragDropManager } from 'dnd-core'\nimport { DndOptions } from '../interfaces'\nimport { isPlainObject } from '../utils/js_utils'\nimport {\n\tDndComponentEnhancer,\n\tDragSourceSpec,\n\tDragSourceCollector,\n} from './interfaces'\nimport { checkDecoratorArguments } from './utils'\nimport { decorateHandler } from './decorateHandler'\nimport { registerSource } from '../common/registration'\nimport { DragSourceMonitorImpl } from '../common/DragSourceMonitorImpl'\nimport { SourceConnector } from '../common/SourceConnector'\nimport { isValidType } from '../utils/isValidType'\nimport { createSourceFactory } from './createSourceFactory'\n\n/**\n * Decorates a component as a dragsource\n * @deprecated - The decorator-based API will be removed in a future major version\n * @param type The dragsource type\n * @param spec The drag source specification\n * @param collect The props collector function\n * @param options DnD options\n */\nexport function DragSource<\n\tRequiredProps,\n\tCollectedProps = any,\n\tDragObject = any\n>(\n\ttype: SourceType | ((props: RequiredProps) => SourceType),\n\tspec: DragSourceSpec<RequiredProps, DragObject>,\n\tcollect: DragSourceCollector<CollectedProps, RequiredProps>,\n\toptions: DndOptions<RequiredProps> = {},\n): DndComponentEnhancer<CollectedProps> {\n\tcheckDecoratorArguments(\n\t\t'DragSource',\n\t\t'type, spec, collect[, options]',\n\t\ttype,\n\t\tspec,\n\t\tcollect,\n\t\toptions,\n\t)\n\tlet getType: (props: RequiredProps) => SourceType = type as (\n\t\tprops: RequiredProps,\n\t) => SourceType\n\tif (typeof type !== 'function') {\n\t\tinvariant(\n\t\t\tisValidType(type),\n\t\t\t'Expected \"type\" provided as the first argument to DragSource to be ' +\n\t\t\t\t'a string, or a function that returns a string given the current props. ' +\n\t\t\t\t'Instead, received %s. ' +\n\t\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source',\n\t\t\ttype,\n\t\t)\n\t\tgetType = () => type\n\t}\n\tinvariant(\n\t\tisPlainObject(spec),\n\t\t'Expected \"spec\" provided as the second argument to DragSource to be ' +\n\t\t\t'a plain object. Instead, received %s. ' +\n\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source',\n\t\tspec,\n\t)\n\tconst createSource = createSourceFactory(spec)\n\tinvariant(\n\t\ttypeof collect === 'function',\n\t\t'Expected \"collect\" provided as the third argument to DragSource to be ' +\n\t\t\t'a function that returns a plain object of props to inject. ' +\n\t\t\t'Instead, received %s. ' +\n\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source',\n\t\tcollect,\n\t)\n\tinvariant(\n\t\tisPlainObject(options),\n\t\t'Expected \"options\" provided as the fourth argument to DragSource to be ' +\n\t\t\t'a plain object when specified. ' +\n\t\t\t'Instead, received %s. ' +\n\t\t\t'Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source',\n\t\tcollect,\n\t)\n\n\treturn (function decorateSource<\n\t\tComponentType extends RComponentType<RequiredProps & CollectedProps>\n\t>(DecoratedComponent: ComponentType) {\n\t\treturn decorateHandler<RequiredProps, CollectedProps, SourceType>({\n\t\t\tcontainerDisplayName: 'DragSource',\n\t\t\tcreateHandler: createSource as any,\n\t\t\tregisterHandler: registerSource,\n\t\t\tcreateConnector: (backend: any) => new SourceConnector(backend),\n\t\t\tcreateMonitor: (manager: DragDropManager) =>\n\t\t\t\tnew DragSourceMonitorImpl(manager),\n\t\t\tDecoratedComponent,\n\t\t\tgetType,\n\t\t\tcollect,\n\t\t\toptions,\n\t\t})\n\t} as any) as DndComponentEnhancer<CollectedProps>\n}\n"]}